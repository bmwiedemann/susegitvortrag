full repo - not just a checkout => no network needed (except fetch/pull +push)
index ; git add ; git diff --cached
output im Erfolgsfalle
local vs remote branches
commits are good
tags+branches+merges are fast+cheap
how to resolve conflicts
make a branch from an earlier point in history
rewriting history ; amend, rebase, cherry-pick
rebase
git revert
show webyast git history with merge commits => solution autosetuprebase = always

pull requests
multiple remotes
git push origin +TAGNAME

show effect of checkout, branch, merge, rebase, cherry-pick, reset --hard, ... with gitk --all


best practices .gitconfig:

[branch]
    autosetuprebase = always
[push]
    default = current
[user]
    name = J. Doe Schmidt
    email = jdoesn@example.com

Example:
bwiedemann@bernhard:~/temp> mkdir susegitvortrag
bwiedemann@bernhard:~/temp> cd susegitvortrag/
bwiedemann@bernhard:~/temp/susegitvortrag> git init
Initialized empty Git repository in /home/bernhard/temp/susegitvortrag/.git/
bwiedemann@bernhard:~/temp/susegitvortrag> gvim brainstorm.txt
bwiedemann@bernhard:~/temp/susegitvortrag> git add brainstorm.txt
bwiedemann@bernhard:~/temp/susegitvortrag> git commit -m "add first ideas"
[master (root-commit) 8c50ad9] add first ideas
 1 files changed, 30 insertions(+), 0 deletions(-)
 create mode 100644 brainstorm.txt
# edited some more...
bwiedemann@bernhard:~/temp/susegitvortrag> git add brainstorm.txt
bwiedemann@bernhard:~/temp/susegitvortrag> git commit --amend -m "add first ideas"
[master 6026b12] add first ideas
 1 files changed, 30 insertions(+), 0 deletions(-)
 create mode 100644 brainstorm.txt
bwiedemann@bernhard:~/temp/susegitvortrag> git commit -a -m "first example"
bwiedemann@bernhard:~/temp/susegitvortrag> git remote add origin git@github.com:bmwiedemann/susegitvortrag.git
bwiedemann@bernhard:~/temp/susegitvortrag> git push -u origin master
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 1.13 KiB, done.
Total 6 (delta 1), reused 0 (delta 0)
To git@github.com:bmwiedemann/susegitvortrag.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin by rebasing.



#########################################################

Notizen aus verschiedenen Rants

überzeugen von git, warum brauchen wir git - wir wollen nur arbeiten
  'Linus nutzt es und hat es geschrieben' ist ja sehr schön, aber kein Argument.
  Feature: Laptop in der Bahn, mobile commits: kein Laptop, kein Bahnfahrer -> kein Vorteil
    (kein offline/in der Freizeit-Arbeiter)
  lokale repos stellen für die tägliche Arbeit keinen Vorteil dar
  lokal (ohne Netz) konnte ich auch schon mit svn arbeiten, nur commit (git: push) geht nicht
    aber das ist bei git genauso, es wurde lediglich umdefiniert was ein Commit ist.
  in welchen use-cases hat git einen Vorteil gegenüber svn?
  was macht git einfacher? was macht es bei meiner täglichen Arbeit einfacher/schneller/besser
  Welche Vorteile von git sind es wert die neue Komplexität von git in Kauf zu nehmen?
  md5-Summen konnte ich früher (als noch svn war) auch machen, auch konnte ich leicht einen
    Patch auf mehrere Branches verteilen:
    wie hilft mir die Andersartigkeit von git das besser zu machen?

täglich ist das Repo in einem komischen Zustand, den ich nicht verstehe
  dann mach ich lieber: git diff > ../patchfile ; rm -rf ; git clone ; patch
  weil ich nicht verstehe was kaputt ist, und es auch gar nicht wissen will

das push-zeit-fenster muss sehr klein gehalten werden, da man sonst in inkonsistenten Zustand kommt
  das führt zu pull-push-Stress - wenn dann noch ein Konflikt kommt gebe ich auf
  kurz: die Funktionen von pull, fetch, push, merge, rebase sind unklar

ich will git nicht verstehen, sondern ich will damit arbeiten, wie früher mit svn
  -> mögliche Antwort: egit

git-Versteher können gut zusammenarbeiten
  alle anderen werden dabei geschickt außenvor gelassen, weil sie erst gar
  nicht produktiv mitarbeiten können

Generelle Anliegen:
  git output verstehen
  was bedeuten all die komischen prüfsummen und was kann ich damit anfangen?

github:
  auflisten MEINER (offenen) pull requests -> ???
    es ist nicht möglich den Status meiner pull requests zu überwachen, das erschwert
    die Arbeit als Maintainer massiv.
  auflisten der offenen pull requests pro repo
    -> https://github.com/organizations/libyui/dashboard/pulls



Zitat:
  "Konsistenz ist ein Konzept das in git nicht vorgesehen ist." (H. Mantel)

Beispiel Meldung (erfunden):
  push failed ..?.. 7837bb ..?.. -> unklar was der Rest aussagt
  Folgerung: git repo ist kaputt -> rm -rf ; git clone



Idee:
  script für tagging Funktion wie beim alten "y2tool tagversion"
    ->  git tag $TAGNAME; git push origin +$TAGNAME


------

http://de.contaowiki.org/Core_Forking_-_best_practice

Github Criticism:
http://zbowling.github.com/blog/2011/11/25/github/


